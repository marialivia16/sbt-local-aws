AWSTemplateFormatVersion: "2010-09-09"
Description: User Permissions Service
Mappings:
  CertMap:
    CODE:
      CertName: arn:aws:acm:eu-west-1:753338109777:certificate/ee8f0807-5fad-455e-866d-698a519f3849
    PROD:
      CertName: arn:aws:acm:eu-west-1:753338109777:certificate/eb7d1a27-a9f7-42c6-b713-173ff5acd4b2

Outputs:
  PermissionsLoadBalancerDNS:
    Description: Load balancer DNS
    Value: !GetAtt PermissionsLoadBalancer.DNSName
  PermissionsTable:
    Value: !Sub ${PermissionsTable}-${Stage}
Parameters:
  AMI:
    Description: AMI for the presence server
    Type: String
  GuardianIP:
    Default: 77.91.248.0/21
    Description: Ip range for the office
    Type: String
  PermissionsTable:
    Default: Permissions
    Description: Name of the permissions data store table
    Type: String
  Stage:
    AllowedValues:
      - CODE
      - PROD
    Default: CODE
    Description: Environment name
    Type: String
  LoggingRoleToAssume:
    Description: Role to assume for cross-account access to logging account
    Type: String
  GithubTeamName:
    Description: Github team name, used for giving ssh access to members of the team
    Type: String
    Default: Editorial-Tools-SSHAccess

Resources:
  AppServerSecurityGroup:
    Properties:
      GroupDescription: Application servers
      SecurityGroupIngress:
        - FromPort: 9000
          IpProtocol: tcp
          SourceSecurityGroupName:
            Fn::GetAtt:
              - PermissionsLoadBalancer
              - SourceSecurityGroup.GroupName
          ToPort: 9000
    Type: AWS::EC2::SecurityGroup

  DistributionInstanceProfile:
    Properties:
      Path: /
      Roles:
        - Ref: DistributionRole
    Type: AWS::IAM::InstanceProfile

  DistributionRole:
    Properties:
      ManagedPolicyArns:
        - Fn::ImportValue: !Sub "guardian-ec2-for-ssm-GuardianEC2ForSSMPolicy"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource:
                  - arn:aws:s3:::permissions-dist/*
          PolicyName: root
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource:
                  - arn:aws:s3:::pan-domain-auth-settings/*
          PolicyName: PanDomainPolicy
    Type: AWS::IAM::Role

  UserByIdDynamoDBTable:
    Properties:
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: PermissionKey
          AttributeType: S
        - AttributeName: PrimaryEmail
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: "UserId-index"
          KeySchema:
            - AttributeName: UserId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: "PrimaryEmail-index"
          KeySchema:
            - AttributeName: PrimaryEmail
              KeyType: HASH
            - AttributeName: PermissionKey
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: PermissionKey
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: true
      TableName: !Sub ${PermissionsTable}-users-byid-${Stage}
    Type: AWS::DynamoDB::Table

  GroupsByIdDynamoDBTable:
    Properties:
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: groupId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: groupId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 6
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: true
      TableName: !Sub ${PermissionsTable}-groups-byid-${Stage}
    Type: AWS::DynamoDB::Table

  LoadBalancerSecurityGroup:
    Properties:
      GroupDescription: Permissions application load balancer
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: "80"
          IpProtocol: tcp
          ToPort: "80"
        - CidrIp: 0.0.0.0/0
          FromPort: "443"
          IpProtocol: tcp
          ToPort: "443"
    Type: AWS::EC2::SecurityGroup

  PermissionsAutoscalingGroup:
    Properties:
      AvailabilityZones:
        - eu-west-1a
        - eu-west-1b
      Cooldown: "180"
      DesiredCapacity: "2"
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchConfigurationName:
        Ref: PermissionsLaunchConfig
      LoadBalancerNames:
        - Ref: PermissionsLoadBalancer
      MaxSize: "4"
      MinSize: "2"
      Tags:
        - Key: Stage
          PropagateAtLaunch: "true"
          Value:
            Ref: Stage
        - Key: Stack
          PropagateAtLaunch: "true"
          Value: workflow
        - Key: App
          PropagateAtLaunch: "true"
          Value: permissions
        - Key: Name
          PropagateAtLaunch: "true"
          Value:
            Fn::Join:
              - '-'
              - - permissions
                - Ref: Stage
    Type: AWS::AutoScaling::AutoScalingGroup

  PermissionsBucketPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource:
              - arn:aws:s3:::permissions-cache/*
      PolicyName: PermissionsS3Policy
      Roles:
        - Ref: DistributionRole
    Type: AWS::IAM::Policy

  PermissionsCloudwatchPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - cloudwatch:PutMetricData
              - ec2:DescribeTags
            Effect: Allow
            Resource: '*'
      PolicyName: PermissionsCloudwatchPolicy
      Roles:
        - Ref: DistributionRole
    Type: AWS::IAM::Policy

  PermissionsDescribeEC2Policy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - EC2:Describe*
            Effect: Allow
            Resource: '*'
      PolicyName: PermisssionsDescribeEC2Policy
      Roles:
        - Ref: DistributionRole
    Type: AWS::IAM::Policy

  WorkflowCrossAccountPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WorkflowCrossAccountPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - sts:assumeRole
            Resource: !Ref LoggingRoleToAssume
      Roles:
        - !Ref DistributionRole

  GithubPublicKeysPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GithubPublicKeysPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: arn:aws:s3:::github-public-keys/*
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource: arn:aws:s3:::github-public-keys
      Roles:
        - !Ref DistributionRole

  PermissionsDynamoPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:*
            Effect: Allow
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Permissions-*
      PolicyName: PermissionsDynamoPolicy
      Roles:
        - Ref: DistributionRole
    Type: AWS::IAM::Policy

  PermissionsLaunchConfig:
    Properties:
      IamInstanceProfile:
        Ref: DistributionInstanceProfile
      ImageId:
        Ref: AMI
      InstanceType: t2.micro
      KeyName: workflow-developers
      SecurityGroups:
        - Ref: AppServerSecurityGroup
        - Ref: SSHSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
          #!/bin/bash -ev
          aws s3 cp s3://permissions-dist/workflow/${Stage}/permissions/permissions.deb /tmp/permissions.deb
          dpkg -i /tmp/permissions.deb
    Type: AWS::AutoScaling::LaunchConfiguration

  PermissionsLoadBalancer:
    Properties:
      AccessLoggingPolicy:
        EmitInterval: 5
        Enabled: true
        S3BucketName: workflow-logs
        S3BucketPrefix:
          Ref: Stage
      AvailabilityZones:
        - eu-west-1a
        - eu-west-1b
      HealthCheck:
        HealthyThreshold: "2"
        Interval: "10"
        Target: HTTP:9000/management/healthcheck
        Timeout: "5"
        UnhealthyThreshold: "2"
      Listeners:
        - InstancePort: "9000"
          LoadBalancerPort: "80"
          Protocol: HTTP
        - InstancePort: "9000"
          LoadBalancerPort: "443"
          Protocol: HTTPS
          SSLCertificateId:
            Fn::FindInMap:
              - CertMap
              - Ref: Stage
              - CertName
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Tags:
        - Key: Stage
          Value:
            Ref: Stage
        - Key: Stack
          Value: workflow
        - Key: App
          Value: permissions
        - Key: Region
          Value:
            Ref: AWS::Region
        - Key: Name
          Value: !Sub permissions-${Stage}
    Type: AWS::ElasticLoadBalancing::LoadBalancer

  SSHSecurityGroup:
    Properties:
      GroupDescription: Allow SSH access from the office
      SecurityGroupIngress:
        - CidrIp:
            Ref: GuardianIP
          FromPort: "22"
          IpProtocol: tcp
          ToPort: "22"
    Type: AWS::EC2::SecurityGroup
